\input texinfo
@ignore

cm.texi - texinfo documentation for cm

Copyright (C) 2009 Andreas Enge

This file is part of CM.

CM is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the licence, or (at your
option) any later version.

CM is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with CM; see the file COPYING. If not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@end ignore

@setfilename cm.info
@settitle CM @value{VERSION}
@iftex
@afourpaper
@end iftex

@include version.texi
@set MINGMP 4.2
@set MINMPFR 2.3.1
@set MINMPC 0.8.2
@set MINMPFRCX 0.3
@set MINPARI 2.3.5
@set AUTHORS Andreas Enge
@set COPYRIGHTDATES 2009, 2010
@syncodeindex fn cp
@syncodeindex tp cp

@ifinfo
@format
START-INFO-DIR-ENTRY
* cm: (cm.info).               Complex Multiplication.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@iftex
@finalout
@end iftex

@copying
@ifinfo
This is the manual for CM, a software collection for complex multiplication,
version @value{VERSION} as of @value{UPDATED-MONTH}.
@end ifinfo

@sp 1

Copyright (C) @value{COPYRIGHTDATES} @value{AUTHORS}

@sp 2

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end copying

@setchapternewpage on
@titlepage

@title CM
@subtitle Complex Multiplication
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED-MONTH}

@author @value{AUTHORS}

@tex
\global\parindent=0pt
\global\parskip=8pt
\global\baselineskip=13pt
@end tex

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@headings double

@ifnothtml
@contents
@end ifnothtml

@ifnottex
@node Top, Introduction, (dir), (dir)

@top CM

This manual documents how to install and use CM, version @value{VERSION}

@menu
* Introduction::
* Installation::
* Libraries::
* Applications::
* References::
* Index::
@end menu
@end ifnottex


@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex introduction

The CM software implements the construction of ring class fields of
imaginary quadratic number fields and of elliptic curves with complex
multiplication via floating point approximations. It consists of libraries
that can be called from within a C program and of executable command
line applications.
For the implemented algorithms, @pxref{En09a}.

Given an imaginary quadratic discriminant D<0, the associated
ring class field is generated by the values of
modular functions @cindex modular function
in special arguments taken from the quadratic field Q(sqrt D);
these values are called
@dfn{singular values} @cindex singular value
or @dfn{class invariants}. @cindex class invariant
Depending on D, different modular functions need to be chosen; we call
the suitable ones
@dfn{class functions}. @cindex class function
CM implements (to a greater or lesser extent) all major class invariants
described in the literature.


@heading Licence
@cindex licence
@cindex copying conditions

CM is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public licence as published by the
Free Software Foundation; either version 2 of the licence, or (at your
option) any later version.

CM is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public licence
for more details.

You should have received a copy of the GNU General Public licence along
with CM; see the file COPYING. If not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


@node Installation, Instructions, Introduction, Top
@chapter Installation
@cindex installation
@cindex documentation

@menu
* Instructions::
* Documentation::
* Data::
* Mailing list::
@end menu


@node Instructions, Documentation, Installation, Installation
@section Instructions
@cindex installation

CM relies on a number of external libraries, which need to be installed
before compiling CM: GNU MP (@pxref{Gr09}, version @value{MINGMP} or higher),
GNU MPFR (@pxref{HaLePeZi09}, version @value{MINMPFR} or higher),
MPC (@pxref{EnThZi09}, version @value{MINMPC} or higher),
MPFRCX (@pxref{En09b}, version @value{MINMPFRCX} or higher) and
PARI (@pxref{Pa10}, version @value{MINPARI} or higher).
Compilation of CM needs a standards compliant C compiler (preferably
GCC).

These are the steps needed to install CM, provided that the required libraries
are installed in standard locations:

@enumerate
@item
@samp{tar xzf cm-@value{VERSION}.tar.gz}

@item
@samp{cd cm-@value{VERSION}}

@item
@samp{./configure}

@item
@samp{make}

This compiles CM.

@item
@samp{make check}

This performs a few tests to check that CM has been built correctly.

If you get error messages, please report them to the mailing list
(cf. @ref{Mailing list}).

@item
@samp{make install}

This copies the executable applications into the directory @file{/usr/local/bin},
the header files into @file{/usr/local/include},
the library files into @file{/usr/local/lib},
the data files into subdirectories of @file{/usr/local/share}
(see @ref{Data})
and the file @file{cm.info} into @file{/usr/local/share/info}.

It is possible to pass the option @samp{--prefix=/my/install/directory}
to the @samp{./configure} step above, so that all files go into
subdirectories of @file{/my/install/directory} instead of @file{/usr/local}.
@end enumerate

If auxiliary libraries are to be found in non-standard locations, these need
to be passed in the @samp{./configure} step above by adding parameters
@itemize
@item
@samp{--with-gmp=<gmp_install_dir>},
@item
@samp{--with-mpfr=<mpfr_install_dir>},
@item
@samp{--with-mpc=<mpc_install_dir>},
@item
@samp{--with-mpfrcx=<mpfrcx_install_dir>}
and
@item
@samp{--with-pari=<pari_install_dir>}.
@end itemize
For an exhaustive list of configuration parameters, execute
@samp{./configure --help}.


@node Documentation, Data, Instructions, Installation
@section Documentation
@cindex documentation

Besides the texinfo documentation obtained by a simple invocation of
@samp{make}, the commands @samp{make dvi}, @samp{make ps},
@samp{make pdf} and @samp{make html}
create the documentation in the corresponding formats.


@node Data, Mailing list, Documentation, Installation
@section Data
@cindex data
@cindex modular polynomial

Some parameterised families of class functions need additional data (namely,
@dfn{modular polynomials}), which depend on the parameter value, to deduce the equation
of an elliptic curve from the class polynomial. A few modular polynomials for
double eta quotients are provided and stored in @file{/usr/local/share/df} (or
the subdirectory @file{share/df} of the installation directory provided with the
@samp{--prefix} configuration option, respectively); those for Atkin functions
can be found in @file{/usr/local/share/af}.

An infinite amount of data is needed to handle all possible discriminants with a
given family of class functions, and already covering all moderately sized
discriminants would require gigabytes of data. So only a very small sample of
modular polynomials is currently distributed; if you need more, please write to
the mailing list (cf. @ref{Mailing list}).


@node Mailing list, Applications, Data, Installation
@section Mailing list
@cindex bug reporting
@cindex mailing list
@cindex help

Bug reports should go to the mailing list @code{cme-discuss@@lists.gforge.inria.fr},
which, as its name indicates, may also be used for discussions around the software.


@node Applications, Libraries, Mailing list, Top
@chapter Applications
@cindex applications

At the time being, CM comes with two sample applications, @samp{cm} and
@samp{classpol}. Both take the same command line arguments.
Being given a negative discriminant D, passed to the program through the
parameter @samp{-d} directly followed (without separating space) by the absolute
value |D| of the discriminant, @samp{cm} computes and outputs a cryptographically
suitable elliptic
curve with complex multiplication by D. The program chooses a 200 bit prime p
and computes a curve E : Y^2 = X^3 + a*X + b over Fp of ``almost prime'' cardinality,
that is, a cardinality that is either itself prime or twice or four times a prime
depending on D (prime cardinalities may only be reached for D = 5 (mod 8)).
On the other hand, @samp{classpol} computes and outputs only the class
polynomial without an associated elliptic curve.

In normal operation, the programs output only the result of their computations.
For more details and progress reports, use the command line parameter @samp{-v}.

By default, both programs use the j-function as class function, which works for
arbitrary discriminants, but is a poor choice for efficiency reasons since it
generates very large class polynomials. It is recommended to specify alternative
class invariants, which, for |D| tending to infinity, allow to gain a constant
factor in the size of the computed objects. A class invariant is selected by
the parameter @samp{-i}, directly followed (without space) by a word
characterising a class function or a parameterised family of such functions; in
the latter case, an optimal parameter value is computed by the program.
The following class functions are implemented:
@itemize
@item
j: The default choice.
@item
doubleeta: Double eta quotients whose levels are the product of two (not necessarily
distinct) primes p1 and p2. The class polynomial is asymptotically smaller by a
@dfn{height factor} @cindex height factor
of 12*psi(p1*p2) / ((p1-1)*(p2-1)), where
psi(p1*p2) = (p1+1)*(p2+1) if p1 and p2 are distinct and psi(p1^2) = p1*(p1+1).
This factor is at least 12 and may reach 37 in the optimal case p1=2 and p2=73.
Since CM has originally been written to test these class functions, the code is
particularly optimised for them. It is always possible to find a suitable
parameter combination p1 and p2, but the required data may not be available to
deduce the elliptic curve; in this case, do not hesitate to make a request on
the mailing list (cf. @ref{Data}).
@item
gamma3, gamma2: Weber class functions with height factors 2 and 3, respectively;
of little practical interest.
@item
weber: Class functions derived from Weber's functions, with height factors
between 6 and 72.
@item
atkin: Optimal functions for X0+(N) with N=71 (height factor 36),
N=131 (height factor 33), N=59 (height
factor 30) or N=47 (height factor 24). While yielding a nice gain in the size of
the computed objects, these functions are slow to evaluate numerically and thus
not really attractive for the floating point approach implemented in CM. The
implementation has not been optimised and should rather be seen as a proof of
concept.
@item
simpleeta: Simple eta quotients; currently not working properly since the
determination of optimal parameters is still work in progress.
@item
multieta: Multiple eta quotients; currently not working properly since the
determination of optimal parameters is still work in progress.
@end itemize


@heading Example invocations

@itemize
@item
@samp{cm -d108708}

Computes a curve with complex multiplication by D=-108708 over a prime field
of 200 bit and with cardinality twice a prime of 199 bit.

@item
@samp{cm -d108708 -idoubleeta}

Computes a curve with complex multiplication by D=-108708 over the same
prime field and of the same cardinality, but the class polynomial computed using
a double eta quotient has coefficients of 151 bit instead of 5874 bit.
The optimal parameter combination p1=2 and p2=193 is determined automatically.

@item
@samp{cm -d2717700 -idoubleeta}

Computes a curve with complex multiplication by D=-2717700=-25*108708. Since this
corresponds to the non-maximal order of conductor 5 in the same quadratic field,
the finite prime field and the cardinality are the same. However, the degree as
well as the coefficients of the class polynomial are six times bigger.

@item
@samp{classpol -d108708 -idoubleeta -v}

Computes the class polynomial for the discriminant -108708 using a double
eta quotient, providing details of the computation.
@end itemize

If you experience difficulties creating your own application using the libraries
described in @ref{Libraries}, or are missing functionalities, please do not
hesitate to use the mailing list, cf. @ref{Mailing list}.



@node Libraries, cm_class, Applications, Top
@chapter Libraries
@cindex libraries

The code of CM is organised in libraries to make the different functions
accessible to external applications. With a few exceptions, the names of all
publicly accessible, non-static functions and types start by @code{cm_}
to create a name space proper to CM.

@menu
* cm_class::
* cm_common::
* mpfp::
* mpfpx::
@end menu

@node cm_class, cm_common, Libraries, Libraries
@section @code{cm_class}
@cindex cm_class

The library @code{cm_class} contains the main code needed for computing
class polynomials and elliptic curves with prescribed complex multiplication.
For the time being, only the interface needed to implement the applications
of @ref{Applications}, is made public in @code{cm_class.h}. Further internal
functions, such as the computation of the algebraic conjugates of a class
invariant, can be found in @code{cm_class-impl.h} and may be made public
in the future.

@deftp Type int_cl_t
This signed 64 bit integer type is used for discriminants.
@end deftp

@deftp Type cm_class_t
This structural type holds information related to a class polynomial, from
the discriminant and class function set at initialisation to computed data
such as class numbers and the class polynomial.
@end deftp

@deftypefun void cm_class_init (cm_class_t *@var{c}, int_cl_t @var{d}, char @var{inv}, bool @var{verbose})
Sets the discriminant of @var{c} to @var{disc} and the class function to
@var{inv}.
The variable @var{inv} may take one of the predefined constants
@code{CM_INVARIANT_J}, @code{CM_INVARIANT_DOUBLEETA},
@code{CM_INVARIANT_GAMMA3}, @code{CM_INVARIANT_GAMMA2},
@code{CM_INVARIANT_WEBER}, @code{CM_INVARIANT_SIMPLEETA},
@code{CM_INVARIANT_MULTIETA} or @code{CM_INVARIANT_ATKIN},
corresponding to the class functions enumerated in @ref{Applications}.
For a parameterised family of class functions, a suitable parameter value is
computed if it exists; otherwise, the program execution is aborted.
Moreover, the class number is computed and space is allocated accordingly
for the class polynomial.

If @var{verbose} is set to @code{true}, some information is printed on
screen during execution.
@end deftypefun

@deftypefun void cm_class_compute_minpoly (cm_class_t @var{c}, bool @var{checkpoints},   bool @var{write}, bool @var{print}, bool @var{verbose})

Takes a previously initialised @code{cm_class_t} object @var{c} and computes
the corresponding class polynomial. If @var{print} is @code{true}, the
polynomial is printed on screen, if @var{write} is @code{true}, it is
written to disc into the subdirectory @code{cp}.

The variable @var{checkpoints} is only relevant for record computations; if
set to @code{true}, intermediate results are written to disk and read in
again if the program execution is interrupted and resumed later.

If @var{verbose} is set to @code{true}, some information is printed on
screen during execution.
@end deftypefun

@deftypefun void cm_class_clear (cm_class_t *@var{c})
This is the counterpart to @code{cm_class_init} and should be called once
the class polynomial is not needed any more to free the allocated space.
@end deftypefun

@deftypefun void cm_curve_compute_curve (int_cl_t @var{d}, char @var{inv}, int @var{fieldsize}, const char* @var{modpoldir}, bool @var{print}, bool @var{verbose})
Computes a cryptographically suitable curve with complex multiplication by
@var{d} over some prime field of @var{fieldsize} bits, using the class
function designated by @var{inv}.

If @var{print} is set to @code{true}, the j-invariant and coefficients a and b
of the curve are printed on screen, if @var{verbose} is set to @code{true},
additional progress information is printed.

The variable @var{modpoldir} holds the base directory of the modular
polynomials needed to derive elliptic curves from roots of class polynomials;
the modular polynomials themelves are stored in subdirectories @code{df},
@code{af} and so on of the base directory. In the standard installation,
this is @code{/usr/local/share}.
@end deftypefun


@node cm_common, mpfp, cm_class, Libraries
@section @code{cm_common}
@cindex cm_common

This library is split off from @code{cm_class} and contains functions that
can be seen as internal to the class polynomial computation, but that can
also be useful in a broader context (notably, the computation of modular
polynomials).


@node mpfp, mpfpx, cm_common, Libraries
@section @code{mpfp}
@cindex mpfp

This library defines elements of prime fields (whose modulus is stored
as a global variable).


@node mpfpx, References, mpfp, Libraries
@section @code{mpfpx}
@cindex mpfpx

This library is used for low degree polynomials over prime fields. As
well as the previous library, it is in a very rudimentary state.


@node References, Index, mpfpx, Top
@unnumbered References

@itemize

@item
@anchor{En09a}
[En09a]
Andreas Enge.
The complexity of class polynomial computation via floating point
approximations.
@emph{Mathematics of Computation} 78 (266), 2009,
pp. 1089--1107

@item
@anchor{En09b}
[En09b]
Andreas Enge.
@code{mpfrcx} -- A library for the arithmetic of univariate polynomials over arbitrary
precision real or complex numbers.
INRIA.
Version 0.3, 2010,
@url{http://mpfrcx.multiprecision.org/}

@item
@anchor{EnThZi09}
[EnThZi09]
Andreas Enge, Philippe Th@'eveny and Paul Zimmermann.
@code{mpc} -- A library for multiprecision complex arithmetic with exact rounding.
INRIA.
Version 0.8, 2009,
@url{http://mpc.multiprecision.org/}

@item
@anchor{Gr09}
[Gr09]
Torbj@"orn Granlund et al.
@code{gmp} -- GNU multiprecision library.
Version 4.3.1, 2009,
@url{http://gmplib.org/}

@item
@anchor{HaLePeZi09}
[HaLePeZi09]
Guillaume Hanrot, Vincent Lef@`evre, Patrick P@'elissier, Paul Zimmermann et al.
@code{mpfr} -- A library for multiple-precision floating-point               computations with exact rounding.
Version 2.4.1, 2009,
@url{http://www.mpfr.org/}

@item
@anchor{Pa10}
[Pa10]
The PARI group.
@code{PARI/GP}.
Version 2.3.5, 2010,
@url{http://pari.math.u-bordeaux.fr/}


@end itemize

@node Index, , References, Top
@unnumbered Index
@printindex cp

@bye
